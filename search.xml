<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>汇编和体系结构入门笔记-01汇编基础</title>
    <url>/2024/08/31/%E6%B1%87%E7%BC%96%E5%92%8C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8-01%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1、汇编语言的硬件模型"><a href="#1、汇编语言的硬件模型" class="headerlink" title="1、汇编语言的硬件模型"></a>1、汇编语言的硬件模型</h2><p>从汇编语言的视角看，处理器（特别是寄存器）、内存以及通过总线连接的其他部分就是需要关注的全部。特别的，所有的数据操作都在寄存器中完成，通常寄存器越多，处理器性能也就越高。微处理器的寄存器从8bit到64bit不等，例如8086就使用了16bit的寄存器。寄存器通常有通用和特别两种。通用寄存器用于一般的编程任务。特别寄存器至少有两个（一般是三个）分别为pc,status(也称flags),sp。</p>
<p>pc(program counter)寄存器记录下一条指令对应的内存地址。改变控制流的指令实际上是在操作这个寄存器。<br>status寄存器记录了一系列表明其他指令运行结果的值，每个值都只有0和1两种可能。例如：当一个算数指令的结果为0时，寄存器的Z-flag位被设为1，若非0，则该位被设为0。<br>sp(stack pointer)用于标识栈内存的位置，指向栈的顶部。</p>
<p>内存中每个单元都是8bit，也就是1byte。汇编中，变量可以被存储在内存中或是寄存器中，因此，区分寄存器变量和内存变量是有必要的。 </p>
<h2 id="2、变量"><a href="#2、变量" class="headerlink" title="2、变量"></a>2、变量</h2><p>汇编不再像c语言区分变量的类型（因为他们实质上都是二进制的位），而是区分变量所用的空间。db定义1byte的变量，dw定义2byte的变量，dd定义4byte的变量。因此：c语言中的int类型对应2byte或4byte的变量（不同的编译器实现），c语言中的char类型对应1byte的变量。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">reply <span class="built_in">db</span> <span class="string">&#x27;y&#x27;</span></span><br><span class="line">prompt <span class="built_in">db</span> <span class="string">&#x27;Enter your favorite colour:&#x27;</span>,<span class="number">0</span></span><br><span class="line">colour <span class="built_in">db</span> <span class="number">80</span> dup(?) </span><br><span class="line">i <span class="built_in">db</span> <span class="number">20</span></span><br><span class="line">k <span class="built_in">db</span> ?</span><br><span class="line">num <span class="built_in">dw</span> <span class="number">4000</span></span><br><span class="line">large <span class="built_in">dd</span> <span class="number">80000</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>汇编和体系结构</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
</search>
